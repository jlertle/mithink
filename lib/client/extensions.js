// Generated by CoffeeScript 1.9.0
var m, pubs;

m = require('mithril');

pubs = "update destroy create sync".split(' ');

exports.wrap = function(Mithink) {
  Mithink.__tables__ = {};
  Mithink.lastError = m.prop({});
  Mithink._table = function(name) {
    return Mithink.__tables__[name];
  };
  return Mithink.table = function(name) {
    var action, handler, table, _fn, _fn1, _i, _len, _ref;
    if (Mithink._table(name)) {
      return Mithink._table(name);
    }
    table = Mithink.__tables__[name] = Mithink.adapter.Table.create();
    table.name = name;
    table.Row = Mithink.adapter.Row;
    table.channel = Mithink.createConnection(name);
    table._loading = true;
    table.channel.on('http_error', function(err) {
      Mithink.lastError(err);
      if (table._loading) {
        table._loading = false;
      }
      if (err.data && err.data.id) {
        table.sync(err.data);
      }
      if (Mithink.errorHandler) {
        return Mithink.errorHandler(err);
      }
    });
    _ref = Mithink.adapter.Table.handlers;
    _fn = function(action, handler) {
      return table.channel.on(action, function(data) {
        handler.call(table, data);
        if (Mithink.redraw) {
          return Mithink.redraw();
        }
      });
    };
    for (action in _ref) {
      handler = _ref[action];
      _fn(action, handler);
    }
    _fn1 = function(action) {
      return table[action] = function(data) {
        table.channel.emit(action, data);
        return table;
      };
    };
    for (_i = 0, _len = pubs.length; _i < _len; _i++) {
      action = pubs[_i];
      _fn1(action);
    }
    table.load = function(params) {
      if (table._loading) {
        return table;
      }
      if (params || table.length() === 0) {
        table._loading = true;
        table.channel.emit("load", params);
      }
      return table;
    };
    return table;
  };
};

// Generated by CoffeeScript 1.9.0
var BaseTable, Mithril_Table, m,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

m = require('mithril');

BaseTable = require('../base/Table');

module.exports = Mithril_Table = (function(_super) {
  __extends(Mithril_Table, _super);

  Mithril_Table.Row = require('./Row');

  Mithril_Table.create = function(rows) {
    if (rows == null) {
      rows = [];
    }
    return new this(rows);
  };

  function Mithril_Table(rows) {
    if (rows == null) {
      rows = [];
    }
    this._rows = rows.map((function(_this) {
      return function(row) {
        return Mithril_Table.Row.create(row, _this);
      };
    })(this));
    Mithril_Table.__super__.constructor.apply(this, arguments);
  }

  Mithril_Table.prototype.rows = function() {
    return this._rows;
  };

  Mithril_Table.prototype.map = function(fn) {
    return Array.prototype.map.call(this.all(), fn);
  };

  Mithril_Table.prototype.filter = function(fn) {
    return Array.prototype.filter.call(this.all(), fn);
  };

  Mithril_Table.prototype.where = function(query) {
    return this.filter(function(m) {
      var attr, state, _i, _len, _ref;
      state = false;
      _ref = Object.keys(query);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        state = m.has(attr) && m.attributes[attr]() === query[attr];
      }
      return state;
    });
  };

  Mithril_Table.prototype.first = function(query) {
    if (query) {
      return this.where(query)[0] || null;
    }
    return this.at(0);
  };

  Mithril_Table.prototype.remove = function(query) {
    return this._rows = this.filter(function(m) {
      var attr, state, _i, _len, _ref;
      state = false;
      _ref = Object.keys(query);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        state = m.has(attr) && m.attributes[attr]() !== query[attr];
      }
      return state;
    });
  };

  Mithril_Table.prototype.add = function(adding) {
    if (adding instanceof Mithril_Table.Row) {
      this._rows = this.rows().concat([adding]);
      return this;
    }
    if (!Array.isArray(adding)) {
      this._rows = this.rows().concat([Mithril_Table.Row.create(adding)]);
      return this;
    }
    this._rows = this.rows().concat(adding.map((function(_this) {
      return function(row) {
        if (row instanceof Mithril_Table.Row) {
          return row;
        }
        return Mithril_Table.Row.create(row, _this);
      };
    })(this)));
    return this;
  };

  Mithril_Table.prototype.reset = function(rows) {
    this._rows = rows.map((function(_this) {
      return function(row) {
        return Mithril_Table.Row.create(row, _this);
      };
    })(this));
    return this;
  };

  Mithril_Table.prototype.get = function(id) {
    return this.first({
      id: id
    });
  };

  Mithril_Table.prototype.all = function() {
    return this.rows();
  };

  Mithril_Table.prototype.at = function(index) {
    return this.rows()[index];
  };

  Mithril_Table.prototype.length = function() {
    return this.rows().length;
  };

  Mithril_Table.prototype.toJSON = function() {
    return this.map(function(m) {
      return m.toJSON();
    });
  };

  return Mithril_Table;

})(BaseTable);

Mithril_Table.handlers = {
  load: function(data) {
    this._loading = false;
    this._errored = false;
    this.reset(data);
    return this;
  },
  upsert: function(doc) {
    var update;
    update = this.first({
      id: doc.id
    });
    if (update) {
      update.set(doc);
    } else {
      this.add(doc);
    }
    return this;
  },
  destroy: function(doc) {
    this.remove(function(row) {
      return row.get('id') !== doc.id;
    });
    return this;
  },
  sync: function(doc) {
    this.first({
      id: doc.id
    }).set(doc);
    return this;
  }
};

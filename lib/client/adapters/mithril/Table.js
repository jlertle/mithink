// Generated by CoffeeScript 1.9.0
var Table, m;

m = require('mithril');

module.exports = Table = (function() {
  Table.prototype.Row = require('./Row');

  Table.create = function(rows) {
    if (rows == null) {
      rows = [];
    }
    return new this(rows);
  };

  function Table(rows) {
    if (rows == null) {
      rows = [];
    }
    this.rows = m.prop(rows.map(this._rowize.bind(this)));
    this;
  }

  Table.prototype._rowize = function(attrs) {
    var row;
    row = new this.Row(attrs);
    row.table = this;
    return row;
  };

  Table.prototype.sortBy = function(sort) {
    var key, mod;
    key = Object.keys(sort)[0];
    mod = sort[key];
    this.rows(Array.prototype.sort.call(this.rows(), function(a, b) {
      var weight;
      weight = a.get(key) - b.get(key);
      if (mod === -1) {
        return -1 * weight;
      }
      return weight;
    }));
    return this;
  };

  Table.prototype.isLoading = function() {
    return this._loading || false;
  };

  Table.prototype.map = function(fn) {
    return Array.prototype.map.call(this.rows(), fn);
  };

  Table.prototype.where = function(query) {
    return this.filter(function(m) {
      var attr, state, _i, _len, _ref;
      state = false;
      _ref = Object.keys(query);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        state = m.has(attr) && m.attributes[attr]() === query[attr];
      }
      return state;
    });
  };

  Table.prototype.first = function(query) {
    if (query) {
      return this.where(query)[0] || null;
    }
    return this.at(0);
  };

  Table.prototype.filter = function(fn) {
    return Array.prototype.filter.call(this.rows(), fn);
  };

  Table.prototype.remove = function(query) {
    return this.rows(this.filter(function(m) {
      var attr, state, _i, _len, _ref;
      state = false;
      _ref = Object.keys(query);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        state = m.has(attr) && m.attributes[attr]() !== query[attr];
      }
      return state;
    }));
  };

  Table.prototype.add = function(adding) {
    if (adding instanceof this.Row) {
      return this.rows(this.rows().concat([adding]));
    }
    if (!Array.isArray(adding)) {
      return this.rows(this.rows().concat([new this.Row(adding)]));
    }
    return this.rows(this.rows().concat(adding.map((function(_this) {
      return function(row) {
        if (row instanceof _this.row) {
          return row;
        }
        return new _this.Row(row);
      };
    })(this))));
  };

  Table.prototype.reset = function(rows) {
    this.rows(rows.map(this._rowize.bind(this)));
    return this;
  };

  Table.prototype.get = function(id) {
    return this.first({
      id: id
    });
  };

  Table.prototype.all = function() {
    return this.rows();
  };

  Table.prototype.at = function(index) {
    return this.rows()[index];
  };

  Table.prototype.length = function() {
    return this.rows().length;
  };

  Table.prototype.toJSON = function() {
    return this.map(function(row) {
      return row.toJSON();
    });
  };

  Table.prototype.on = function(evt, handler) {
    this.channel.on(evt, handler);
    return this;
  };

  return Table;

})();

Table.handlers = {
  load: function(data) {
    this._loading = false;
    this._errored = false;
    this.reset(data);
    return this;
  },
  upsert: function(doc) {
    var update;
    update = this.first({
      id: doc.id
    });
    if (update) {
      update.set(doc);
    } else {
      this.add(doc);
    }
    return this;
  },
  remove: function(doc) {
    this.rows(this.filter(function(row) {
      return row.get('id') !== doc.id;
    }));
    return this;
  },
  sync: function(doc) {
    this.first({
      id: doc.id
    }).set(doc);
    return this;
  }
};

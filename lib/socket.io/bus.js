// Generated by CoffeeScript 1.9.0
var Bus, actions, debug, utils;

debug = require('debug')("mithink:bus");

actions = require('./actions');

utils = require('../utils');

Bus = function(io) {
  Bus.io = io;
  Bus.io.on("connection", function(socket) {
    return socket.emit(Bus.NAMESPACE, {
      tables: Bus.__tables__
    });
  });
  return Bus;
};

Bus.__actions__ = {};

Bus.__tables__ = [];

Bus.NAMESPACE = "methink";

require('./access-control')(Bus);

Bus.extend = function(model) {
  model.guard = Bus.guard.bind({
    model: model
  });
  model.channel = Bus.io.of(utils.channelName(model._name));
  model.channel.on("connection", Bus.wrap.bind({
    model: model
  }));
  return Bus;
};

Bus.wireUp = function(model) {
  if (!~Bus.__tables__.indexOf(model._name)) {
    Bus.__tables__.push(model._name);
  }
  model.changes().then(function(feed) {
    return feed.each(function(err, doc) {
      if (err) {
        debug(err);
        throw err;
      }
      if (!doc.isSaved()) {
        debug("emitting delete...");
        return model.channel.emit('delete', doc);
      }
      debug("emitting upsert...");
      return model.channel.emit('upsert', doc);
    });
  });
  return Bus;
};

Bus.wrap = function(socket) {
  var action, ctx, _i, _len, _ref, _results;
  debug(socket.id + " joining " + this.model._name);
  ctx = {
    socket: socket,
    model: this.model
  };
  Bus.action('load').call(ctx);
  _ref = Object.keys(Bus.__actions__);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    action = _ref[_i];
    ctx.action = action;
    _results.push(socket.on(action, Bus.__protect__.call(ctx, Bus.action(action))));
  }
  return _results;
};

Bus.registerActions = function(opts) {
  var action, fn;
  for (action in opts) {
    fn = opts[action];
    Bus.__actions__[action] = fn;
  }
  return Bus;
};

Bus.registerActions(require('./actions'));

Bus.action = function(action) {
  return Bus.__actions__[action];
};


/*
 * If you pass in an Object of Thinky models handle it
 *
 */

Bus.registerModels = function(modelorModelsObj) {
  var model, namespace, _i, _len;
  if (utils.isPlainObject(modelorModelsObj)) {
    for (namespace in modelorModelsObj) {
      model = modelorModelsObj[namespace];
      Bus.extend(model).wireUp(model);
    }
    return Bus;
  }
  if (Array.isArray(modelorModelsObj)) {
    for (_i = 0, _len = modelorModelsObj.length; _i < _len; _i++) {
      model = modelorModelsObj[_i];
      Bus.extend(model).wireUp(model);
    }
    return Bus;
  }
  Bus.extend(model).wireUp(model);
  return Bus;
};

module.exports = Bus;

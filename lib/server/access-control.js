// Generated by CoffeeScript 1.9.0
var Access_Control, debug, errorHandler, log, utils,
  __slice = [].slice;

utils = require('../utils');

debug = require('debug')("mithink:security");

log = require('debug')('mithink:actions');

errorHandler = require('./error-handler');

Access_Control = function(Bus) {
  Bus.__access_control__ = {};

  /**
   * defines access control middleware for actions
   * @class Server.Model 
   * @function Server.Model#guard
   * @param {Object} opts - an Object of actions to protect, and how to protect them
   * @example
   * Thing.guard {
   *   connection: (socket)->
   *     return false unless socket.authenticated
   *     return true
   * }
   */
  Bus.guard = function(opts) {
    var action, check, _results;
    _results = [];
    for (action in opts) {
      check = opts[action];
      _results.push(Bus.__access_control__[utils.namespace(this.model._name, action)] = check);
    }
    return _results;
  };
  Bus.checkpoint = function() {
    return Bus.__access_control__[utils.namespace(this.model._name, this.action)] || utils.allowAll;
  };
  return Bus.__protect__ = function(action) {
    var ctx;
    ctx = this;
    return function() {
      var args, denyMessage, passed;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      passed = Bus.checkpoint.call(ctx)(ctx.socket);
      denyMessage = "unauthorized attempt to perform " + ctx.action + " on " + ctx.model._name + " table";
      if (passed.then) {
        return passed.then(function() {
          log(ctx.socket.id + " performing " + (ctx.action.toUpperCase()) + " on " + (ctx.model._name.toUpperCase()) + " -- params: " + (JSON.stringify(utils.redact(args))));
          return action.apply(ctx, args);
        })["catch"](function(err) {
          if (err == null) {
            err = {};
          }
          debug(err.message || denyMessage);
          return errorHandler.call(ctx, 401, args[0], {
            message: err.message || denyMessage
          });
        });
      }
      if (passed) {
        log(ctx.socket.id + " performing " + (ctx.action.toUpperCase()) + " on " + (ctx.model._name.toUpperCase()) + " -- params: " + (JSON.stringify(utils.redact(args))));
        return action.apply(ctx, args);
      }
      debug(denyMessage);
      return errorHandler.call(ctx, 401, args[0], {
        message: denyMessage
      });
    };
  };
};

module.exports = Access_Control;
